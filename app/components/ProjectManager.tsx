'use client'

import { useState, useEffect } from 'react'
import { PlusCircle, X, Edit2, Copy, Trash2, RefreshCw, ChevronLeft, ChevronRight, Search, Globe, MessageCircle, Send, Twitter, DollarSign, Calendar, Tag, CheckCircle, XCircle } from 'lucide-react'
import Link from 'next/link'
import { Project, Wallet } from '../data/model'
import { projectStorageIndexedDB, walletStorageIndexedDB } from '../utils/storage-db'
import ProjectCard from './ProjectCard'

const PREDEFINED_TAGS = ['空投', 'DeFi']
const PROJECT_STAGES = ['测试', '主网上线']
const AIRDROP_STAGES = ['未开始', '已明确', '已发']

export default function ProjectManager() {
  const [projects, setProjects] = useState<Project[]>([])
  const [wallets, setWallets] = useState<Wallet[]>([])
  const [showAddProject, setShowAddProject] = useState(false)
  const [showAddTag, setShowAddTag] = useState(false)
  const [newTag, setNewTag] = useState('')
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [newProject, setNewProject] = useState<Project>({
    id: '',
    name: '',
    description: '',
    website: '',
    discord: '',
    telegram: '',
    twitter: '',
    isMandatory: false,
    tags: [],  // 确保这里有 tags 属性
    stage: PROJECT_STAGES[0],  // 置默认值为第一个项
    airdropStage: AIRDROP_STAGES[0],  // 设置默认值为第一个选项
    estimatedPrice: '',
    endDate: '',
    relatedWallets: [],
    createdAt: new Date().toISOString(), // Add this line
  })
  const [editingProject, setEditingProject] = useState<Project | null>(null)
  const [showWalletSelector, setShowWalletSelector] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const projectsPerPage = 10
  const [walletFilterType, setWalletFilterType] = useState('All')
  const [walletSearchTerm, setWalletSearchTerm] = useState('')
  const [walletTypes, setWalletTypes] = useState<string[]>([])
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    const loadData = async () => {
      const savedProjects = await projectStorageIndexedDB.getProjects()
      console.log('Loaded projects:', savedProjects)
      setProjects(savedProjects)
      setWallets(await walletStorageIndexedDB.getWallets())
      
      // 加载钱包类型
      const savedWalletTypes = await walletStorageIndexedDB.getWalletTypes()
      setWalletTypes(savedWalletTypes)
    }
    loadData()
  }, [])

  const resetNewProject = () => {
    setNewProject({
      id: '',
      name: '',
      description: '',
      website: '',
      discord: '',
      telegram: '',
      twitter: '',
      isMandatory: false,
      tags: [],
      stage: PROJECT_STAGES[0],
      airdropStage: AIRDROP_STAGES[0],
      estimatedPrice: '',
      endDate: '',
      relatedWallets: [],
      createdAt: new Date().toISOString(),
    });
  };

  const addProject = async () => {
    if (newProject.name.trim()) {
      const projectToAdd = {
        ...newProject,
        id: '', // ID will be generated by the storage function
        name: newProject.name.trim(),
        isDeleted: false,
        createdAt: new Date().toISOString(),
        tags: newProject.tags || [],
        stage: newProject.stage || PROJECT_STAGES[0],
        airdropStage: newProject.airdropStage || AIRDROP_STAGES[0],
      }
      await projectStorageIndexedDB.saveProject(projectToAdd)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      setProjects(updatedProjects)
      resetNewProject();
      setShowAddProject(false)
    } else {
      alert('项目名称不能为空！')
    }
  }

  const toggleTag = (tag: string) => {
    setSelectedTags(prev => 
      prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag]
    )
  }

  const addTag = () => {
    if (newTag && !PREDEFINED_TAGS.includes(newTag)) {
      PREDEFINED_TAGS.push(newTag)
      setNewTag('')
      setShowAddTag(false)
    }
  }

  const getTagColor = (tag: string) => {
    return tag === '空投' ? 'bg-blue-200 text-blue-800' : 'bg-green-200 text-green-800'
  }

  const editProject = (project: Project) => {
    setEditingProject(project)
    setNewProject(project)
    setShowAddProject(true)
  }

  const updateProject = async () => {
    if (editingProject) {
      const updatedProject = { 
        ...editingProject,
        ...newProject,
        updatedAt: new Date().toISOString(),
      }
      console.log('Updating project:', updatedProject);
      await projectStorageIndexedDB.saveProject(updatedProject)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      console.log('Updated projects:', updatedProjects);
      setProjects(updatedProjects)
      setEditingProject(null)
      resetNewProject();
      setShowAddProject(false)
    } else {
      addProject()
    }
  }

  const deleteProject = async (projectId: string) => {
    await projectStorageIndexedDB.deleteProject(projectId)
    const updatedProjects = await projectStorageIndexedDB.getProjects()
    setProjects(updatedProjects)
  }

  const restoreProject = async (projectId: string) => {
    const projectToRestore = projects.find(p => p.id === projectId)
    if (projectToRestore) {
      const restoredProject = { ...projectToRestore, isDeleted: false, updatedAt: new Date().toISOString() }
      await projectStorageIndexedDB.saveProject(restoredProject)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      setProjects(updatedProjects)
    }
  }

  const sortedProjects = [...projects].sort((a, b) => {
    if (a.isDeleted !== b.isDeleted) {
      return a.isDeleted ? 1 : -1
    }
    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
  })

  const filteredProjects = sortedProjects.filter(project => 
    (selectedTags.length === 0 || selectedTags.some(tag => project.tags.includes(tag))) &&
    project.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const indexOfLastProject = currentPage * projectsPerPage
  const indexOfFirstProject = indexOfLastProject - projectsPerPage
  const currentProjects = filteredProjects.slice(indexOfFirstProject, indexOfLastProject)

  const totalPages = Math.max(1, Math.ceil(filteredProjects.length / projectsPerPage))

  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)

  const toggleWallet = (address: string) => {
    setNewProject(prev => ({
      ...prev,
      relatedWallets: prev.relatedWallets.includes(address)
        ? prev.relatedWallets.filter(a => a !== address)
        : [...prev.relatedWallets, address]
    }))
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('地址已复到剪贴板')
    }, (err) => {
      console.error('无法复制文本: ', err)
    })
  }

  const shortenAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`
  }

  const shortenInfo = (info: string, maxLength: number = 20) => {
    if (info.length <= maxLength) return info;
    return info.slice(0, maxLength) + '...';
  }

  const isProjectExpired = (project: Project) => {
    if (!project.endDate) return false
    const endDate = new Date(project.endDate)
    const currentDate = new Date()
    return currentDate > endDate
  }

  const getWalletDisplayName = (address: string) => {
    const wallet = wallets.find(w => w.address === address);
    if (!wallet) return shortenAddress(address);
    return wallet.alias || wallet.twitter || shortenAddress(address);
  }

  const filteredWallets = wallets.filter(wallet => 
    (walletFilterType === 'All' || wallet.type === walletFilterType) &&
    (wallet.alias?.toLowerCase().includes(walletSearchTerm.toLowerCase()) ||
     wallet.address.toLowerCase().includes(walletSearchTerm.toLowerCase()) ||
     wallet.twitter?.toLowerCase().includes(walletSearchTerm.toLowerCase()))
  )

  return (
    <div className="space-y-6">
      {/* 顶部操作栏 */}
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-4">
          {/* 搜索框 */}
          <div className="relative">
            <input
              type="text"
              placeholder="搜索项目..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
            <Search className="absolute left-3 top-2.5 text-gray-400" size={20} />
          </div>

          {/* 标签筛选 */}
          <div className="flex space-x-2">
            {PREDEFINED_TAGS.map(tag => (
              <button
                key={tag}
                onClick={() => toggleTag(tag)}
                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                  selectedTags.includes(tag)
                    ? 'bg-primary-100 text-primary-700 border border-primary-200'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>

        {/* 添加按钮 */}
        <div className="flex space-x-2">
          <button
            onClick={() => setShowAddTag(true)}
            className="px-4 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors"
          >
            新增标签
          </button>
          <button
            onClick={() => setShowAddProject(true)}
            className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
          >
            添加项目
          </button>
        </div>
      </div>

      {/* 项目列表 */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {currentProjects.map((project) => (
          <ProjectCard
            key={project.id}
            project={project}
            onEdit={editProject}
            onDelete={deleteProject}
            onRestore={restoreProject}
            getTagColor={getTagColor}
            copyToClipboard={copyToClipboard}
            getWalletDisplayName={getWalletDisplayName}
            isProjectExpired={(project) => {
              if (!project.endDate) return false;
              const endDate = new Date(project.endDate);
              const today = new Date();
              return endDate < today;
            }}
          />
        ))}
      </div>

      {/* 分页控件 */}
      {filteredProjects.length > 0 && (
        <div className="flex justify-center items-center space-x-4">
          <button
            onClick={() => paginate(currentPage - 1)}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 disabled:opacity-50 disabled:hover:bg-primary-100 transition-colors"
          >
            <ChevronLeft size={20} />
          </button>
          <span className="text-gray-700 font-medium">
            第 {currentPage} 页，共 {totalPages} 页
          </span>
          <button
            onClick={() => paginate(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 disabled:opacity-50 disabled:hover:bg-primary-100 transition-colors"
          >
            <ChevronRight size={20} />
          </button>
        </div>
      )}

      {/* 添加/编辑项目模态框 */}
      {showAddProject && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
          <div className="bg-white p-6 rounded-lg w-3/4 max-w-4xl my-8 shadow-xl">
            <h3 className="text-lg font-medium text-gray-900 mb-6">
              {editingProject ? '编辑项目' : '新增项目'}
            </h3>
            <div className="grid grid-cols-1 gap-6">
              {/* 基本信息 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  项目名称
                </label>
                <input
                  type="text"
                  placeholder="项目名称"
                  value={newProject.name}
                  onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md 
                    focus:outline-none focus:ring-2 focus:ring-primary-500
                    text-gray-900 bg-white placeholder-gray-400"
                />
              </div>

              {/* 项目简介 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  项目简介
                </label>
                <textarea
                  placeholder="项目简介"
                  value={newProject.description}
                  onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                  className="w-full h-32 px-3 py-2 border border-gray-300 rounded-md 
                    focus:outline-none focus:ring-2 focus:ring-primary-500
                    text-gray-900 bg-white placeholder-gray-400"
                />
              </div>

              {/* 社交链接 */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Discord链接
                  </label>
                  <input
                    type="text"
                    placeholder="Discord链接"
                    value={newProject.discord}
                    onChange={(e) => setNewProject({...newProject, discord: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    官网地址
                  </label>
                  <input
                    type="text"
                    placeholder="官网地址"
                    value={newProject.website}
                    onChange={(e) => setNewProject({...newProject, website: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Telegram链接
                  </label>
                  <input
                    type="text"
                    placeholder="Telegram链接"
                    value={newProject.telegram}
                    onChange={(e) => setNewProject({...newProject, telegram: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Twitter链接
                  </label>
                  <input
                    type="text"
                    placeholder="Twitter链接"
                    value={newProject.twitter}
                    onChange={(e) => setNewProject({...newProject, twitter: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    所处阶段
                  </label>
                  <select
                    value={newProject.stage}
                    onChange={(e) => setNewProject({...newProject, stage: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  >
                    {PROJECT_STAGES.map(stage => (
                      <option key={stage} value={stage}>{stage}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    空投阶段
                  </label>
                  <select
                    value={newProject.airdropStage}
                    onChange={(e) => setNewProject({...newProject, airdropStage: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  >
                    {AIRDROP_STAGES.map(stage => (
                      <option key={stage} value={stage}>{stage}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    预计币价格
                  </label>
                  <input
                    type="text"
                    placeholder="预计币价格"
                    value={newProject.estimatedPrice}
                    onChange={(e) => setNewProject({...newProject, estimatedPrice: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    结束时间节点
                  </label>
                  <input
                    type="date"
                    placeholder="结束时间节点"
                    value={newProject.endDate}
                    onChange={(e) => setNewProject({...newProject, endDate: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md 
                      focus:outline-none focus:ring-2 focus:ring-primary-500
                      text-gray-900 bg-white placeholder-gray-400"
                  />
                </div>
              </div>

              {/* 标签选择 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  选择标签
                </label>
                <div className="flex flex-wrap gap-2">
                  {PREDEFINED_TAGS.map((tag) => (
                    <button
                      key={tag}
                      onClick={() => setNewProject(prev => ({
                        ...prev,
                        tags: prev.tags.includes(tag) 
                          ? prev.tags.filter(t => t !== tag)
                          : [...prev.tags, tag]
                      }))}
                      className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                        newProject.tags.includes(tag)
                          ? 'bg-primary-100 text-primary-700 border border-primary-200'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      {tag}
                    </button>
                  ))}
                </div>
              </div>

              {/* 必做项目复选框 */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="project-mandatory"
                  checked={newProject.isMandatory}
                  onChange={(e) => setNewProject({...newProject, isMandatory: e.target.checked})}
                  className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                />
                <label htmlFor="project-mandatory" className="ml-2 text-sm text-gray-700">
                  是否为必做项目
                </label>
              </div>
            </div>

            {/* 底部按钮 */}
            <div className="mt-6 flex justify-end space-x-3">
              <button 
                onClick={() => {
                  setShowAddProject(false);
                  setEditingProject(null);
                  resetNewProject();
                }} 
                className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                取消
              </button>
              <button 
                onClick={updateProject} 
                className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors"
              >
                {editingProject ? '更新' : '添加'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 钱包选择器模态框 */}
      {showWalletSelector && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-yellow-100 p-6 rounded-lg w-96">
            <h3 className="text-xl font-bold mb-4 text-yellow-800">选择钱包</h3>
            <div className="mb-4">
              <select
                value={walletFilterType}
                onChange={(e) => setWalletFilterType(e.target.value)}
                className="w-full p-2 mb-2 bg-yellow-50 rounded-md text-yellow-800 border border-yellow-300"
              >
                <option value="All">所有类型</option>
                {walletTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              <div className="relative">
                <input
                  type="text"
                  placeholder="搜索钱包..."
                  value={walletSearchTerm}
                  onChange={(e) => setWalletSearchTerm(e.target.value)}
                  className="w-full p-2 pl-8 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                />
                <Search className="absolute left-2 top-2 text-yellow-500" size={20} />
              </div>
            </div>
            <div className="max-h-60 overflow-y-auto">
              {filteredWallets.map((wallet: Wallet) => (
                <div key={wallet.address} className="mb-2 pb-2 border-b border-yellow-200 last:border-b-0">
                  <button
                    onClick={() => {
                      if (!newProject.relatedWallets.includes(wallet.address)) {
                        setNewProject(prev => ({
                          ...prev,
                          relatedWallets: [...prev.relatedWallets, wallet.address]
                        }))
                      }
                      setShowWalletSelector(false)
                    }}
                    className="w-full text-left p-2 hover:bg-yellow-200 rounded-md"
                  >
                    <div>{getWalletDisplayName(wallet.address)}</div>
                    <div className="text-sm text-gray-600">{shortenAddress(wallet.address)} - {wallet.type}</div>
                  </button>
                </div>
              ))}
            </div>
            <div className="flex justify-end mt-4">
              <button onClick={() => setShowWalletSelector(false)} className="bg-yellow-300 hover:bg-yellow-400 text-yellow-800 font-bold py-2 px-4 rounded">
                关闭
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 添加标签模态框 */}
      {showAddTag && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-96 shadow-xl">
            <h3 className="text-lg font-medium text-gray-900 mb-4">新增标签</h3>
            <input
              type="text"
              placeholder="新标签名称"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md 
                focus:outline-none focus:ring-2 focus:ring-primary-500
                text-gray-900 bg-white placeholder-gray-400 mb-4"
            />
            <div className="flex justify-end space-x-3">
              <button 
                onClick={() => setShowAddTag(false)} 
                className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                取消
              </button>
              <button 
                onClick={addTag} 
                className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors"
              >
                添加
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}