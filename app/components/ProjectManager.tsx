'use client'

import { useState, useEffect } from 'react'
import { PlusCircle, X, Edit, Copy, Trash2, RefreshCw, ChevronLeft, ChevronRight, CheckCircle, XCircle, Search } from 'lucide-react'
import { Project, Wallet } from '../data/model'
import { projectStorageIndexedDB, walletStorageIndexedDB } from '../utils/storage-db'

const PREDEFINED_TAGS = ['空投', 'DeFi']
const PROJECT_STAGES = ['测试', '主网上线']
const AIRDROP_STAGES = ['未开始', '已明确', '已发']


export default function ProjectManager() {
  const [projects, setProjects] = useState<Project[]>([])
  const [wallets, setWallets] = useState<Wallet[]>([])
  const [showAddProject, setShowAddProject] = useState(false)
  const [showAddTag, setShowAddTag] = useState(false)
  const [newTag, setNewTag] = useState('')
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [newProject, setNewProject] = useState<Project>({
    id: '',
    name: '',
    description: '',
    website: '',
    discord: '',
    telegram: '',
    twitter: '',
    isMandatory: false,
    tags: [],  // 确保这里有 tags 属性
    stage: PROJECT_STAGES[0],  // 设置默认值为第一个选���
    airdropStage: AIRDROP_STAGES[0],  // 设置默认值为第一个选项
    estimatedPrice: '',
    endDate: '',
    relatedWallets: [],
    createdAt: new Date().toISOString(), // Add this line
  })
  const [editingProject, setEditingProject] = useState<Project | null>(null)
  const [showWalletSelector, setShowWalletSelector] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const projectsPerPage = 10
  const [walletFilterType, setWalletFilterType] = useState('All')
  const [walletSearchTerm, setWalletSearchTerm] = useState('')
  const [walletTypes, setWalletTypes] = useState<string[]>([])

  useEffect(() => {
    const loadData = async () => {
      const savedProjects = await projectStorageIndexedDB.getProjects()
      console.log('Loaded projects:', savedProjects)
      setProjects(savedProjects)
      setWallets(await walletStorageIndexedDB.getWallets())
      
      // 加载钱包类型
      const savedWalletTypes = await walletStorageIndexedDB.getWalletTypes()
      setWalletTypes(savedWalletTypes)
    }
    loadData()
  }, [])

  const addProject = async () => {
    if (newProject.name.trim()) {
      const projectToAdd = {
        ...newProject,
        id: '', // ID will be generated by the storage function
        name: newProject.name.trim(),
        isDeleted: false,
        createdAt: new Date().toISOString(),
        tags: newProject.tags || [],
        stage: newProject.stage || PROJECT_STAGES[0],  // 确保有默认值
        airdropStage: newProject.airdropStage || AIRDROP_STAGES[0],  // 确保有默认值
      }
      await projectStorageIndexedDB.saveProject(projectToAdd)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      setProjects(updatedProjects)
      setNewProject({
        id: '',
        name: '',
        description: '',
        website: '',
        discord: '',
        telegram: '',
        twitter: '',
        isMandatory: false,
        tags: [],
        stage: PROJECT_STAGES[0],  // 重置为默认值
        airdropStage: AIRDROP_STAGES[0],  // 重置为默认值
        estimatedPrice: '',
        endDate: '',
        relatedWallets: [],
        createdAt: new Date().toISOString(),
      })
      setShowAddProject(false)
    } else {
      alert('项目名称不能为空！')
    }
  }

  const toggleTag = (tag: string) => {
    setSelectedTags(prev => 
      prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag]
    )
  }

  const addTag = () => {
    if (newTag && !PREDEFINED_TAGS.includes(newTag)) {
      PREDEFINED_TAGS.push(newTag)
      setNewTag('')
      setShowAddTag(false)
    }
  }

  const getTagColor = (tag: string) => {
    return tag === '空投' ? 'bg-blue-200 text-blue-800' : 'bg-green-200 text-green-800'
  }

  const editProject = (project: Project) => {
    setEditingProject(project)
    setNewProject(project)
    setShowAddProject(true)
  }

  const updateProject = async () => {
    if (editingProject) {
      const updatedProject = { 
        ...editingProject,
        ...newProject,  // 使用最新的 newProject 状态
        updatedAt: new Date().toISOString(),
      }
      console.log('Updating project:', updatedProject);  // 添加日志
      await projectStorageIndexedDB.saveProject(updatedProject)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      console.log('Updated projects:', updatedProjects);  // 添加日志
      setProjects(updatedProjects)
      setEditingProject(null)
      setShowAddProject(false)
    } else {
      addProject()
    }
  }

  const deleteProject = async (projectId: string) => {
    await projectStorageIndexedDB.deleteProject(projectId)
    const updatedProjects = await projectStorageIndexedDB.getProjects()
    setProjects(updatedProjects)
  }

  const restoreProject = async (projectId: string) => {
    const projectToRestore = projects.find(p => p.id === projectId)
    if (projectToRestore) {
      const restoredProject = { ...projectToRestore, isDeleted: false, updatedAt: new Date().toISOString() }
      await projectStorageIndexedDB.saveProject(restoredProject)
      const updatedProjects = await projectStorageIndexedDB.getProjects()
      setProjects(updatedProjects)
    }
  }

  const sortedProjects = [...projects].sort((a, b) => {
    if (a.isDeleted !== b.isDeleted) {
      return a.isDeleted ? 1 : -1
    }
    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
  })

  const filteredProjects = sortedProjects.filter(project => 
    selectedTags.length === 0 || selectedTags.some(tag => project.tags.includes(tag))
  )

  const indexOfLastProject = currentPage * projectsPerPage
  const indexOfFirstProject = indexOfLastProject - projectsPerPage
  const currentProjects = filteredProjects.slice(indexOfFirstProject, indexOfLastProject)

  const totalPages = Math.max(1, Math.ceil(filteredProjects.length / projectsPerPage))

  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)

  const toggleWallet = (address: string) => {
    setNewProject(prev => ({
      ...prev,
      relatedWallets: prev.relatedWallets.includes(address)
        ? prev.relatedWallets.filter(a => a !== address)
        : [...prev.relatedWallets, address]
    }))
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('地址已复到剪贴板')
    }, (err) => {
      console.error('无法复制文本: ', err)
    })
  }

  const shortenAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`
  }

  const shortenInfo = (info: string, maxLength: number = 20) => {
    if (info.length <= maxLength) return info;
    return info.slice(0, maxLength) + '...';
  }

  const isProjectExpired = (project: Project) => {
    if (!project.endDate) return false
    const endDate = new Date(project.endDate)
    const currentDate = new Date()
    return currentDate > endDate
  }

  const getWalletDisplayName = (address: string) => {
    const wallet = wallets.find(w => w.address === address);
    if (!wallet) return shortenAddress(address);
    return wallet.alias || wallet.twitter || shortenAddress(address);
  }

  const filteredWallets = wallets.filter(wallet => 
    (walletFilterType === 'All' || wallet.type === walletFilterType) &&
    (wallet.alias?.toLowerCase().includes(walletSearchTerm.toLowerCase()) ||
     wallet.address.toLowerCase().includes(walletSearchTerm.toLowerCase()) ||
     wallet.twitter?.toLowerCase().includes(walletSearchTerm.toLowerCase()))
  )

  return (
    <div className="bg-yellow-100 rounded-lg p-6 shadow-lg relative">
      <h2 className="text-2xl font-bold mb-4 text-yellow-800">项目管理</h2>
      
      {/* 标签筛选 */}
      <div className="mb-4 flex flex-wrap gap-2">
        {PREDEFINED_TAGS.map(tag => (
          <button
            key={tag}
            onClick={() => toggleTag(tag)}
            className={`px-3 py-1 rounded-full text-sm ${
              selectedTags.includes(tag) ? getTagColor(tag) : 'bg-yellow-200 text-yellow-700'
            }`}
          >
            {tag}
          </button>
        ))}
      </div>

      {/* 添加项目和标签按钮 */}
      <div className="absolute top-6 right-6 flex space-x-2">
        <button onClick={() => setShowAddProject(true)} className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded inline-flex items-center">
          <PlusCircle className="mr-2" size={18} />
          <span>新增项目</span>
        </button>
        <button onClick={() => setShowAddTag(true)} className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded inline-flex items-center">
          <PlusCircle className="mr-2" size={18} />
          <span>新增标签</span>
        </button>
      </div>

      {/* 项目列表 */}
      <div className="space-y-4 mt-8">
        {filteredProjects.length > 0 ? (
          currentProjects.map((project, index) => (
            <div 
              key={index} 
              className={`rounded-md p-4 shadow ${
                project.isDeleted 
                  ? 'bg-gray-200' 
                  : isProjectExpired(project) 
                    ? 'bg-red-100' 
                    : 'bg-yellow-50'
              }`}
            >
              <div className="flex justify-between items-start">
                <div>
                  <h3 className={`text-lg font-semibold ${project.isDeleted ? 'text-gray-600' : 'text-yellow-800'}`}>
                    {project.name}
                  </h3>
                  <p className="text-yellow-700 mt-2">{project.description}</p>
                </div>
                <div className="flex items-center space-x-2">
                  {!project.isDeleted && (
                    <button onClick={() => editProject(project)} className="text-yellow-600 hover:text-yellow-800 p-1">
                      <Edit size={24} />
                    </button>
                  )}
                  <button 
                    onClick={() => project.isDeleted ? restoreProject(project.id) : deleteProject(project.id)} 
                    className="text-yellow-600 hover:text-yellow-800 p-1"
                  >
                    {project.isDeleted ? <RefreshCw size={24} /> : <Trash2 size={24} />}
                  </button>
                </div>
              </div>
              <div className="mt-2 space-y-1">
                <p className="text-yellow-600">网站: <a href={project.website} className="text-blue-500 hover:underline">{project.website}</a></p>
                <p className="text-yellow-600">Discord: <a href={project.discord} className="text-blue-500 hover:underline">{project.discord}</a></p>
                <p className="text-yellow-600">Telegram: <a href={project.telegram} className="text-blue-500 hover:underline">{project.telegram}</a></p>
                <p className="text-yellow-600">Twitter: <a href={project.twitter} className="text-blue-500 hover:underline">{project.twitter}</a></p>
              </div>
              <p className="text-yellow-700">所处阶段: {project.stage}</p>
              <p className="text-yellow-700">空投阶段: {project.airdropStage}</p>
              <p className="text-yellow-700">预计币价: ${project.estimatedPrice}</p>
              <p className="text-yellow-700">结束时间: {project.endDate}</p>
              <div className="mt-2 flex flex-wrap gap-2">
                {project.tags && project.tags.length > 0 ? (
                  project.tags.map((tag, tagIndex) => (
                    <span key={tagIndex} className={`px-2 py-1 rounded-full text-sm ${getTagColor(tag)}`}>
                      {tag}
                    </span>
                  ))
                ) : (
                  <span className="text-yellow-600">无标签</span>
                )}
              </div>
              <div className="mt-2 flex items-center">
                <span className="mr-2">是否必做:</span>
                {project.isMandatory ? (
                  <CheckCircle className="text-yellow-500" size={24} />
                ) : (
                  <XCircle className="text-gray-500" size={24} />
                )}
              </div>
              <div className="mt-2">
                <p className="text-yellow-700">关联钱包:</p>
                <div className="flex flex-wrap gap-2">
                  {project.relatedWallets && project.relatedWallets.length > 0 ? (
                    project.relatedWallets.map((address, index) => (
                      <span key={index} className="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-sm flex items-center">
                        {getWalletDisplayName(address)}
                        <button onClick={() => copyToClipboard(address)} className="ml-1 text-yellow-600 hover:text-yellow-800">
                          <Copy size={14} />
                        </button>
                      </span>
                    ))
                  ) : (
                    <span className="text-yellow-600">无关联钱包</span>
                  )}
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center py-8">
            <p className="text-yellow-800 mb-4">暂无项目，请新增</p>
            <button 
              onClick={() => setShowAddProject(true)} 
              className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded"
            >
              新增项目
            </button>
          </div>
        )}
      </div>

      {/* 分页控件 */}
      {filteredProjects.length > 0 && (
        <div className="mt-4 flex justify-center">
          <button
            onClick={() => paginate(currentPage - 1)}
            disabled={currentPage === 1}
            className="mr-2 bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded disabled:opacity-50"
          >
            <ChevronLeft size={18} />
          </button>
          <span className="mx-2 py-2">{currentPage} / {totalPages}</span>
          <button
            onClick={() => paginate(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="ml-2 bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded disabled:opacity-50"
          >
            <ChevronRight size={18} />
          </button>
        </div>
      )}

      {/* 添加/编辑项目模态框 */}
      {showAddProject && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
          <div className="bg-yellow-100 p-6 rounded-lg w-3/4 max-w-4xl my-8">
            <h3 className="text-xl font-bold mb-4 text-yellow-800">{editingProject ? '编辑项目' : '新增目'}</h3>
            <div className="grid grid-cols-1 gap-4">
              <div>
                <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-name">
                  项目名称
                </label>
                <input
                  id="project-name"
                  type="text"
                  placeholder="项名称"
                  value={newProject.name}
                  onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                  className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                />
              </div>
              <div>
                <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-description">
                  项目简介
                </label>
                <textarea
                  id="project-description"
                  placeholder="项目简介"
                  value={newProject.description}
                  onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                  className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300 h-20"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-discord">
                    Discord链接
                  </label>
                  <input
                    id="project-discord"
                    type="text"
                    placeholder="Discord链接"
                    value={newProject.discord}
                    onChange={(e) => setNewProject({...newProject, discord: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-website">
                    官网地址
                  </label>
                  <input
                    id="project-website"
                    type="text"
                    placeholder="官地址"
                    value={newProject.website}
                    onChange={(e) => setNewProject({...newProject, website: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-telegram">
                    Telegram链接
                  </label>
                  <input
                    id="project-telegram"
                    type="text"
                    placeholder="Telegram链接"
                    value={newProject.telegram}
                    onChange={(e) => setNewProject({...newProject, telegram: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-twitter">
                    Twitter链接
                  </label>
                  <input
                    id="project-twitter"
                    type="text"
                    placeholder="Twitter链接"
                    value={newProject.twitter}
                    onChange={(e) => setNewProject({...newProject, twitter: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-stage">
                    所处阶段
                  </label>
                  <select
                    id="project-stage"
                    value={newProject.stage}
                    onChange={(e) => setNewProject({...newProject, stage: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 border border-yellow-300"
                  >
                    {PROJECT_STAGES.map(stage => (
                      <option key={stage} value={stage}>{stage}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-airdrop-stage">
                    空投阶段
                  </label>
                  <select
                    id="project-airdrop-stage"
                    value={newProject.airdropStage}
                    onChange={(e) => setNewProject({...newProject, airdropStage: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 border border-yellow-300"
                  >
                    {AIRDROP_STAGES.map(stage => (
                      <option key={stage} value={stage}>{stage}</option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-estimated-price">
                    预计币价格
                  </label>
                  <input
                    id="project-estimated-price"
                    type="text"
                    placeholder="预计币价格"
                    value={newProject.estimatedPrice}
                    onChange={(e) => setNewProject({...newProject, estimatedPrice: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
                <div>
                  <label className="block text-yellow-700 text-sm font-bold mb-2" htmlFor="project-end-date">
                    结束时间节点
                  </label>
                  <input
                    id="project-end-date"
                    type="date"
                    placeholder="结束时间节点"
                    value={newProject.endDate}
                    onChange={(e) => setNewProject({...newProject, endDate: e.target.value})}
                    className="w-full p-2 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-yellow-800 mb-2">选择标签：</p>
                  <div className="flex flex-wrap gap-2">
                    {PREDEFINED_TAGS.map((tag) => (
                      <button
                        key={tag}
                        onClick={() => setNewProject(prev => ({
                          ...prev,
                          tags: prev.tags.includes(tag) 
                            ? prev.tags.filter(t => t !== tag)
                            : [...prev.tags, tag]
                        }))}
                        className={`px-2 py-1 rounded-full text-sm ${
                          newProject.tags.includes(tag)
                            ? getTagColor(tag)
                            : 'bg-yellow-200 text-yellow-700'
                        }`}
                      >
                        {tag}
                      </button>
                    ))}
                  </div>
                </div>
                <div className="flex items-center">
                  <input
                    id="project-mandatory"
                    type="checkbox"
                    checked={newProject.isMandatory}
                    onChange={(e) => setNewProject({...newProject, isMandatory: e.target.checked})}
                    className="mr-2"
                  />
                  <label htmlFor="project-mandatory" className="text-yellow-800">是否为必做项目</label>
                </div>
              </div>
              <div>
                <p className="text-yellow-800 mb-2">关联钱包：</p>
                <div className="flex flex-wrap gap-2 items-center">
                  {newProject.relatedWallets.map((address, index) => (
                    <span key={index} className="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-sm flex items-center">
                      {shortenAddress(address)}
                      <button 
                        onClick={() => setNewProject(prev => ({
                          ...prev, 
                          relatedWallets: prev.relatedWallets.filter(a => a !== address)
                        }))} 
                        className="ml-1 text-yellow-600 hover:text-yellow-800"
                      >
                        <X size={14} />
                      </button>
                    </span>
                  ))}
                  <button
                    onClick={() => setShowWalletSelector(true)}
                    className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold p-2 rounded-full"
                  >
                    <PlusCircle size={18} />
                  </button>
                </div>
              </div>
            </div>
            <div className="flex justify-end mt-4">
              <button onClick={() => {setShowAddProject(false); setEditingProject(null);}} className="mr-2 bg-yellow-300 hover:bg-yellow-400 text-yellow-800 font-bold py-2 px-4 rounded">
                取消
              </button>
              <button onClick={updateProject} className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded">
                {editingProject ? '更新' : '添加'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 钱包选择器模态框 */}
      {showWalletSelector && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-yellow-100 p-6 rounded-lg w-96">
            <h3 className="text-xl font-bold mb-4 text-yellow-800">选择钱包</h3>
            <div className="mb-4">
              <select
                value={walletFilterType}
                onChange={(e) => setWalletFilterType(e.target.value)}
                className="w-full p-2 mb-2 bg-yellow-50 rounded-md text-yellow-800 border border-yellow-300"
              >
                <option value="All">所有类型</option>
                {walletTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              <div className="relative">
                <input
                  type="text"
                  placeholder="搜索钱包..."
                  value={walletSearchTerm}
                  onChange={(e) => setWalletSearchTerm(e.target.value)}
                  className="w-full p-2 pl-8 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
                />
                <Search className="absolute left-2 top-2 text-yellow-500" size={20} />
              </div>
            </div>
            <div className="max-h-60 overflow-y-auto">
              {filteredWallets.map((wallet: Wallet) => (
                <div key={wallet.address} className="mb-2 pb-2 border-b border-yellow-200 last:border-b-0">
                  <button
                    onClick={() => {
                      if (!newProject.relatedWallets.includes(wallet.address)) {
                        setNewProject(prev => ({
                          ...prev,
                          relatedWallets: [...prev.relatedWallets, wallet.address]
                        }))
                      }
                      setShowWalletSelector(false)
                    }}
                    className="w-full text-left p-2 hover:bg-yellow-200 rounded-md"
                  >
                    <div>{getWalletDisplayName(wallet.address)}</div>
                    <div className="text-sm text-gray-600">{shortenAddress(wallet.address)} - {wallet.type}</div>
                  </button>
                </div>
              ))}
            </div>
            <div className="flex justify-end mt-4">
              <button onClick={() => setShowWalletSelector(false)} className="bg-yellow-300 hover:bg-yellow-400 text-yellow-800 font-bold py-2 px-4 rounded">
                关闭
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 添加标签模态框 */}
      {showAddTag && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-yellow-100 p-6 rounded-lg w-96">
            <h3 className="text-xl font-bold mb-4 text-yellow-800">新增标签</h3>
            <input
              type="text"
              placeholder="新标签名称"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              className="w-full p-2 mb-4 bg-yellow-50 rounded-md text-yellow-800 placeholder-yellow-500 border border-yellow-300"
            />
            <div className="flex justify-end">
              <button onClick={() => setShowAddTag(false)} className="mr-2 bg-yellow-300 hover:bg-yellow-400 text-yellow-800 font-bold py-2 px-4 rounded">
                取消
              </button>
              <button onClick={addTag} className="bg-yellow-500 hover:bg-yellow-600 text-yellow-900 font-bold py-2 px-4 rounded">
                添加
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}